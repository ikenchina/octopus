// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: tcc_bank.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TccBankServiceClient is the client API for TccBankService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TccBankServiceClient interface {
	Try(ctx context.Context, in *TccRequest, opts ...grpc.CallOption) (*TccResponse, error)
	Confirm(ctx context.Context, in *TccRequest, opts ...grpc.CallOption) (*TccResponse, error)
	Cancel(ctx context.Context, in *TccRequest, opts ...grpc.CallOption) (*TccResponse, error)
}

type tccBankServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTccBankServiceClient(cc grpc.ClientConnInterface) TccBankServiceClient {
	return &tccBankServiceClient{cc}
}

func (c *tccBankServiceClient) Try(ctx context.Context, in *TccRequest, opts ...grpc.CallOption) (*TccResponse, error) {
	out := new(TccResponse)
	err := c.cc.Invoke(ctx, "/bankservice.TccBankService/Try", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tccBankServiceClient) Confirm(ctx context.Context, in *TccRequest, opts ...grpc.CallOption) (*TccResponse, error) {
	out := new(TccResponse)
	err := c.cc.Invoke(ctx, "/bankservice.TccBankService/Confirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tccBankServiceClient) Cancel(ctx context.Context, in *TccRequest, opts ...grpc.CallOption) (*TccResponse, error) {
	out := new(TccResponse)
	err := c.cc.Invoke(ctx, "/bankservice.TccBankService/Cancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TccBankServiceServer is the server API for TccBankService service.
// All implementations must embed UnimplementedTccBankServiceServer
// for forward compatibility
type TccBankServiceServer interface {
	Try(context.Context, *TccRequest) (*TccResponse, error)
	Confirm(context.Context, *TccRequest) (*TccResponse, error)
	Cancel(context.Context, *TccRequest) (*TccResponse, error)
	mustEmbedUnimplementedTccBankServiceServer()
}

// UnimplementedTccBankServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTccBankServiceServer struct {
}

func (UnimplementedTccBankServiceServer) Try(context.Context, *TccRequest) (*TccResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Try not implemented")
}
func (UnimplementedTccBankServiceServer) Confirm(context.Context, *TccRequest) (*TccResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Confirm not implemented")
}
func (UnimplementedTccBankServiceServer) Cancel(context.Context, *TccRequest) (*TccResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (UnimplementedTccBankServiceServer) mustEmbedUnimplementedTccBankServiceServer() {}

// UnsafeTccBankServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TccBankServiceServer will
// result in compilation errors.
type UnsafeTccBankServiceServer interface {
	mustEmbedUnimplementedTccBankServiceServer()
}

func RegisterTccBankServiceServer(s grpc.ServiceRegistrar, srv TccBankServiceServer) {
	s.RegisterService(&TccBankService_ServiceDesc, srv)
}

func _TccBankService_Try_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TccRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TccBankServiceServer).Try(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bankservice.TccBankService/Try",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TccBankServiceServer).Try(ctx, req.(*TccRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TccBankService_Confirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TccRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TccBankServiceServer).Confirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bankservice.TccBankService/Confirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TccBankServiceServer).Confirm(ctx, req.(*TccRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TccBankService_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TccRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TccBankServiceServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bankservice.TccBankService/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TccBankServiceServer).Cancel(ctx, req.(*TccRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TccBankService_ServiceDesc is the grpc.ServiceDesc for TccBankService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TccBankService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bankservice.TccBankService",
	HandlerType: (*TccBankServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Try",
			Handler:    _TccBankService_Try_Handler,
		},
		{
			MethodName: "Confirm",
			Handler:    _TccBankService_Confirm_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _TccBankService_Cancel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tcc_bank.proto",
}
