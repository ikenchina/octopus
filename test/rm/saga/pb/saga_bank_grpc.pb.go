// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: saga_bank.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SagaBankServiceClient is the client API for SagaBankService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SagaBankServiceClient interface {
	In(ctx context.Context, in *SagaRequest, opts ...grpc.CallOption) (*SagaResponse, error)
	Out(ctx context.Context, in *SagaRequest, opts ...grpc.CallOption) (*SagaResponse, error)
}

type sagaBankServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSagaBankServiceClient(cc grpc.ClientConnInterface) SagaBankServiceClient {
	return &sagaBankServiceClient{cc}
}

func (c *sagaBankServiceClient) In(ctx context.Context, in *SagaRequest, opts ...grpc.CallOption) (*SagaResponse, error) {
	out := new(SagaResponse)
	err := c.cc.Invoke(ctx, "/bankservice.SagaBankService/In", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sagaBankServiceClient) Out(ctx context.Context, in *SagaRequest, opts ...grpc.CallOption) (*SagaResponse, error) {
	out := new(SagaResponse)
	err := c.cc.Invoke(ctx, "/bankservice.SagaBankService/Out", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SagaBankServiceServer is the server API for SagaBankService service.
// All implementations must embed UnimplementedSagaBankServiceServer
// for forward compatibility
type SagaBankServiceServer interface {
	In(context.Context, *SagaRequest) (*SagaResponse, error)
	Out(context.Context, *SagaRequest) (*SagaResponse, error)
	mustEmbedUnimplementedSagaBankServiceServer()
}

// UnimplementedSagaBankServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSagaBankServiceServer struct {
}

func (UnimplementedSagaBankServiceServer) In(context.Context, *SagaRequest) (*SagaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method In not implemented")
}
func (UnimplementedSagaBankServiceServer) Out(context.Context, *SagaRequest) (*SagaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Out not implemented")
}
func (UnimplementedSagaBankServiceServer) mustEmbedUnimplementedSagaBankServiceServer() {}

// UnsafeSagaBankServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SagaBankServiceServer will
// result in compilation errors.
type UnsafeSagaBankServiceServer interface {
	mustEmbedUnimplementedSagaBankServiceServer()
}

func RegisterSagaBankServiceServer(s grpc.ServiceRegistrar, srv SagaBankServiceServer) {
	s.RegisterService(&SagaBankService_ServiceDesc, srv)
}

func _SagaBankService_In_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SagaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SagaBankServiceServer).In(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bankservice.SagaBankService/In",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SagaBankServiceServer).In(ctx, req.(*SagaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SagaBankService_Out_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SagaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SagaBankServiceServer).Out(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bankservice.SagaBankService/Out",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SagaBankServiceServer).Out(ctx, req.(*SagaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SagaBankService_ServiceDesc is the grpc.ServiceDesc for SagaBankService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SagaBankService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bankservice.SagaBankService",
	HandlerType: (*SagaBankServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "In",
			Handler:    _SagaBankService_In_Handler,
		},
		{
			MethodName: "Out",
			Handler:    _SagaBankService_Out_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "saga_bank.proto",
}
