// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: tcc_tc.proto

package pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TcClient is the client API for Tc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TcClient interface {
	NewGtid(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*TccResponse, error)
	Get(ctx context.Context, in *TccRequest, opts ...grpc.CallOption) (*TccResponse, error)
	Prepare(ctx context.Context, in *TccRequest, opts ...grpc.CallOption) (*TccResponse, error)
	Register(ctx context.Context, in *TccRequest, opts ...grpc.CallOption) (*TccResponse, error)
	Confirm(ctx context.Context, in *TccRequest, opts ...grpc.CallOption) (*TccResponse, error)
	Cancel(ctx context.Context, in *TccRequest, opts ...grpc.CallOption) (*TccResponse, error)
}

type tcClient struct {
	cc grpc.ClientConnInterface
}

func NewTcClient(cc grpc.ClientConnInterface) TcClient {
	return &tcClient{cc}
}

func (c *tcClient) NewGtid(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*TccResponse, error) {
	out := new(TccResponse)
	err := c.cc.Invoke(ctx, "/tcc.Tc/NewGtid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tcClient) Get(ctx context.Context, in *TccRequest, opts ...grpc.CallOption) (*TccResponse, error) {
	out := new(TccResponse)
	err := c.cc.Invoke(ctx, "/tcc.Tc/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tcClient) Prepare(ctx context.Context, in *TccRequest, opts ...grpc.CallOption) (*TccResponse, error) {
	out := new(TccResponse)
	err := c.cc.Invoke(ctx, "/tcc.Tc/Prepare", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tcClient) Register(ctx context.Context, in *TccRequest, opts ...grpc.CallOption) (*TccResponse, error) {
	out := new(TccResponse)
	err := c.cc.Invoke(ctx, "/tcc.Tc/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tcClient) Confirm(ctx context.Context, in *TccRequest, opts ...grpc.CallOption) (*TccResponse, error) {
	out := new(TccResponse)
	err := c.cc.Invoke(ctx, "/tcc.Tc/Confirm", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tcClient) Cancel(ctx context.Context, in *TccRequest, opts ...grpc.CallOption) (*TccResponse, error) {
	out := new(TccResponse)
	err := c.cc.Invoke(ctx, "/tcc.Tc/Cancel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TcServer is the server API for Tc service.
// All implementations must embed UnimplementedTcServer
// for forward compatibility
type TcServer interface {
	NewGtid(context.Context, *empty.Empty) (*TccResponse, error)
	Get(context.Context, *TccRequest) (*TccResponse, error)
	Prepare(context.Context, *TccRequest) (*TccResponse, error)
	Register(context.Context, *TccRequest) (*TccResponse, error)
	Confirm(context.Context, *TccRequest) (*TccResponse, error)
	Cancel(context.Context, *TccRequest) (*TccResponse, error)
	mustEmbedUnimplementedTcServer()
}

// UnimplementedTcServer must be embedded to have forward compatible implementations.
type UnimplementedTcServer struct {
}

func (UnimplementedTcServer) NewGtid(context.Context, *empty.Empty) (*TccResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewGtid not implemented")
}
func (UnimplementedTcServer) Get(context.Context, *TccRequest) (*TccResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTcServer) Prepare(context.Context, *TccRequest) (*TccResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prepare not implemented")
}
func (UnimplementedTcServer) Register(context.Context, *TccRequest) (*TccResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedTcServer) Confirm(context.Context, *TccRequest) (*TccResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Confirm not implemented")
}
func (UnimplementedTcServer) Cancel(context.Context, *TccRequest) (*TccResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancel not implemented")
}
func (UnimplementedTcServer) mustEmbedUnimplementedTcServer() {}

// UnsafeTcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TcServer will
// result in compilation errors.
type UnsafeTcServer interface {
	mustEmbedUnimplementedTcServer()
}

func RegisterTcServer(s grpc.ServiceRegistrar, srv TcServer) {
	s.RegisterService(&Tc_ServiceDesc, srv)
}

func _Tc_NewGtid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TcServer).NewGtid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tcc.Tc/NewGtid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TcServer).NewGtid(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tc_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TccRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TcServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tcc.Tc/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TcServer).Get(ctx, req.(*TccRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tc_Prepare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TccRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TcServer).Prepare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tcc.Tc/Prepare",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TcServer).Prepare(ctx, req.(*TccRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tc_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TccRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TcServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tcc.Tc/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TcServer).Register(ctx, req.(*TccRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tc_Confirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TccRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TcServer).Confirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tcc.Tc/Confirm",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TcServer).Confirm(ctx, req.(*TccRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tc_Cancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TccRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TcServer).Cancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tcc.Tc/Cancel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TcServer).Cancel(ctx, req.(*TccRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Tc_ServiceDesc is the grpc.ServiceDesc for Tc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tcc.Tc",
	HandlerType: (*TcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewGtid",
			Handler:    _Tc_NewGtid_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Tc_Get_Handler,
		},
		{
			MethodName: "Prepare",
			Handler:    _Tc_Prepare_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Tc_Register_Handler,
		},
		{
			MethodName: "Confirm",
			Handler:    _Tc_Confirm_Handler,
		},
		{
			MethodName: "Cancel",
			Handler:    _Tc_Cancel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tcc_tc.proto",
}
